package ${package}.${moduleName}.controller;
import com.baomidou.mybatisplus.extension.api.R;
import ${package}.${moduleName}.common.Constant;
import ${package}.${moduleName}.common.PageData;
import ${package}.${moduleName}.utils.ExcelUtils;
import ${package}.${moduleName}.dto.${className}DTO;
import ${package}.${moduleName}.excel.${className}Excel;
import ${package}.${moduleName}.service.${className}Service;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;


/**
 * ${comments}
 *
 * @author ${author} ${email}
 * @since ${version} ${date}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
@Api(tags = "${comments}")
public class ${className}Controller extends BaseController {
    @Autowired
    private ${className}Service ${classname}Service;

    @GetMapping("page")
    @ApiOperation("分页")
    @ApiImplicitParams({
            @ApiImplicitParam(name = Constant.PAGE, value = "当前页码，从1开始", paramType = "query", required = true, dataType = "int"),
            @ApiImplicitParam(name = Constant.LIMIT, value = "每页显示记录数", paramType = "query", required = true, dataType = "int"),
            @ApiImplicitParam(name = Constant.ORDER_FIELD, value = "排序字段", paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = Constant.ORDER, value = "排序方式，可选值(asc、desc)", paramType = "query", dataType = "String")
    })

    public R<PageData<${className}DTO>> page(@ApiIgnore @RequestParam Map<String, Object> params) {
        PageData<${className}DTO> page = ${classname}Service.page(params);

        return success(page);
    }

    @GetMapping("{id}")
    @ApiOperation("信息")
    public R<${className}DTO> get(@PathVariable("id") Long id) {
            ${className}DTO data = ${classname}Service.get(id);

        return success(data);
    }

    @PostMapping
    @ApiOperation("保存")
    public R<Boolean> save(@RequestBody ${className}DTO dto) {
        //效验数据

            ${classname}Service.save(dto);

        return success(true);
    }

    @PostMapping("update")
    @ApiOperation("修改")
    public R<Boolean> update(@RequestBody ${className}DTO dto) {
        //效验数据

            ${classname}Service.update(dto);

        return success(true);
    }

    @PostMapping("delete")
    @ApiOperation("删除")
    public R<Boolean> delete(@RequestBody Long[] ids) {
        //效验数据

            ${classname}Service.delete(ids);

        return success(true);
    }

    @GetMapping("export")
    @ApiOperation("导出")
    public void export(@ApiIgnore @RequestParam Map<String, Object> params, HttpServletResponse response) throws Exception {
        List<${className}DTO> list = ${classname}Service.list(params);

        ExcelUtils.exportExcelToTarget(response, null, list, ${className}Excel.class);
    }

}